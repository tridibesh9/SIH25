import mongoose from "mongoose";
import { v4 as uuidv4 } from "uuid";

// Define the project schema
const projectSchema = new mongoose.Schema(
    {
        // Custom unique ID for the project
        projectId: {
            type: String,
            default: () => uuidv4(),
            unique: true,
            required: true,
            index: true,
        },
        ownerId: {
            type: String,
            required: true,
        },
        // Name of the project
        projectName: {
            type: String,
            required: [true, "Project name is required."],
            trim: true,
        },
        // Name of the project owner
        owner: {
            type: String,
            required: [true, "Owner name is required."],
            trim: true,
        },
        contactNumber: {
            type: String,
            required: [true, "Contact number is required."],
            trim: true,
        },
        // Contact email for the project owner
        email: {
            type: String,
            required: [true, "Email is required."],
            lowercase: true,
            trim: true,
            match: [/\S+@\S+\.\S+/, "Please use a valid email address."],
        },
        // Geographic location of the project
        location: {
            type: String,
            required: [true, "Location is required."],
        },
        // Type of blue carbon ecosystem
        type: {
            type: String,
            required: [true, "Project type is required."],
            enum: {
                values: [
                    "wetlands",
                    "mangroves",
                    "seagrass meadows",
                    "kelp forests",
                    "salt marshes",
                ],
                message: "{VALUE} is not a supported project type.",
            },
        },
        // Detailed description of the project site
        siteDescription: {
            type: String
        },
        // URL or identifier for the land ownership documents
        landDocuments: {
            type: String,
            required: [true, "Land document link is required."],
        },
        // Array of URLs for project images
        projectImages: {
            type: [String],
            required: [true, "At least one project image is required."],
        },
        // Flexible field for site verification data
        siteVerification: {
            type: mongoose.Schema.Types.Mixed,
        },
        droneSurvey: {
            type: mongoose.Schema.Types.Mixed,
        },
        // NEW: Current verification status of the project
        verificationStatus: {
            type: String,
            enum: ["land approval", "ngo", "drones", "pending", "admin approval pending", "approved", "rejected"],
            default: "pending",
        },
        // Carbon credits generated by the project
        carbonCredits: {
            type: Number,
            default: 0,
            min: [0, "Carbon credits cannot be negative."],
        },
    },
    {
        // Automatically add createdAt and updatedAt timestamps
        timestamps: true,
    }
);

// Create and export the Project model
const Project = mongoose.model("Project", projectSchema);
export default Project;